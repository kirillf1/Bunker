{{- if .Values.kafka.enabled }}
{{- /* Собираем список топиков из параметров служб */}}
{{- $topicMap := dict }}

{{- if and .Values.gameApi.enabled .Values.gameApi.app.kafka.createGameResultRequestsTopicName }}
  {{- $_ := set $topicMap .Values.gameApi.app.kafka.createGameResultRequestsTopicName (dict "partitions" .Values.gameApi.replicaCount) }}
  {{- $_ := set $topicMap .Values.gameApi.app.kafka.createGameResultResponsesTopicName (dict "partitions" .Values.gameApi.replicaCount) }}
{{- end }}

{{- if and .Values.resultCreatorApi.enabled .Values.resultCreatorApi.app.kafka.createGameResultRequestsTopicName }}
  {{- $_ := set $topicMap .Values.resultCreatorApi.app.kafka.createGameResultRequestsTopicName (dict "partitions" .Values.resultCreatorApi.replicaCount) }}
  {{- $_ := set $topicMap .Values.resultCreatorApi.app.kafka.createGameResultResponsesTopicName (dict "partitions" .Values.resultCreatorApi.replicaCount) }}
{{- end }}

{{- /* Итерация по уникальным топикам */}}
{{- range $name, $cfg := $topicMap }}
---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: {{ $name }}
  labels:
    strimzi.io/cluster: {{ $.Values.kafka.clusterName }}
spec:
  partitions: {{ $cfg.partitions }}
  replicas: {{ $.Values.kafka.topicReplicationFactor }}
  config:
    cleanup.policy: delete
    retention.ms: 604800000
{{- end }}
{{- end }} 