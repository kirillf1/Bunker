# Глобальные настройки
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Настройки общих компонентов
nameOverride: ""
fullnameOverride: ""

# ServiceAccount
serviceAccount:
  create: true
  annotations: {}
  name: ""

# PostgreSQL настройки
postgresql:
  # Включить встроенную PostgreSQL (bitnami chart)
  enabled: true
  # Настройки секретов PostgreSQL
  secrets:
    # Имя существующего секрета (оставить пустым для автосоздания)
    existingSecret: ""
    # Ключи для отдельных компонентов БД (используются при existingSecret)
    secretKeys:
      usernameKey: "postgres-user"
      passwordKey: "postgres-password"
      replicationPasswordKey: "replication-password"
    # Пароли (используются при автосоздании секретов)
    adminPassword: "admin_password"
    replicationPassword: "replicapassword"
    userPassword: "user_password"
  
  # Настройки базы данных
  database:
    # Настройки для встроенной PostgreSQL (используется когда postgresql.enabled: true)
    internal:
      # Имя сервиса будет сформировано автоматически по шаблону
      port: 5432
      gameApiDatabase: bunker_game_db
      gameComponentsDatabase: bunker_game_components_db
      username: postgres
    
    # Настройки для внешней PostgreSQL (используется когда postgresql.enabled: false)
    external:
      host: "external-postgres.example.com"
      port: 5432
      gameApiDatabase: bunker_game_db
      gameComponentsDatabase: bunker_game_components_db
      username: postgres
      # Для внешней БД также нужно настроить postgresql.secrets.adminPassword
  
  # Настройки bitnami PostgreSQL chart
  auth:
    existingSecret: "postgresql-secret"
    secretKeys:
      adminPasswordKey: "postgres-password"
      replicationPasswordKey: "replication-password"

  architecture: replication
  resourcesPreset: "small"
  primary:
    persistence:
      enabled: true
      size: 10Gi
      storageClass: ""
  readReplicas:
    replicaCount: 1
    persistence:
      enabled: true
      size: 10Gi
      storageClass: ""
    resourcesPreset: "small"
  metrics:
    enabled: true
    serviceMonitor:
      enabled: false

# Bunker Game API
gameApi:
  enabled: true
  replicaCount: 1
  
  # Настройки приложения Game API
  app:
    environment: Production
    aspnetCoreUrls: "http://+:80"
    allowedHosts: "*"
    
    # PostgreSQL настройки
    postgres:
      # Настройки секрета для PostgreSQL
      existingSecret: ""
      secretKeys:
        connectionStringKey: "postgres-connection"
        readReplicaConnectionKey: "postgres-readonly-connection"
    
    # Serilog настройки
    logging:
      level: Information
      microsoftLevel: Warning
      aspnetCoreLevel: Error
      hostingLevel: Information
    
    # OpenTelemetry настройки
    telemetry:
      enabled: true
      namespace: monitoring
      collectorService: otel-collector-opentelemetry-collector
      collectorPort: 4317
    
    # Kafka настройки
    kafka:
      # Настройки секрета для Kafka
      existingSecret: ""
      secretKeys:
        loginKey: "kafka-login"
        passwordKey: "kafka-password"
      
      servers: "localhost:9092"
      # Логин и пароль (используются если existingSecret пуст)
      # ВАЖНО: Эти данные чувствительные и будут сохранены в секрете
      login: ""
      password: ""
      createGameResultRequestsTopicName: "create-game-result-requests-test-topic"
      createGameResultResponsesTopicName: "create-game-result-responses-test-topic"
    
    # GameComponents настройки
    gameComponents:
      address: ""  # Адрес GameComponents API (например, http://gamecomponents-service:80)
  
  image:
    repository: kirillf1/bunker-game-api
    tag: "1.1"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 80
  
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: bunker-game-api.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  healthChecks:
    startup:
      enabled: true
      path: /health/startup
      initialDelaySeconds: 1
      periodSeconds: 10
      failureThreshold: 10
    liveness:
      enabled: true
      path: /health/live
      initialDelaySeconds: 15
      periodSeconds: 30
      timeoutSeconds: 5
      failureThreshold: 3
    readiness:
      enabled: true
      path: /health/ready
      initialDelaySeconds: 3
      periodSeconds: 30
      timeoutSeconds: 5
      failureThreshold: 2

# Bunker GameComponents API  
gameComponentsApi:
  enabled: true
  replicaCount: 1
  
  app:
    environment: Production
    aspnetCoreUrls: "http://+:80"
    allowedHosts: "*"
    
    # PostgreSQL настройки
    postgres:
      # Настройки секрета для PostgreSQL
      existingSecret: ""
      secretKeys:
        connectionStringKey: "postgres-connection"
        readReplicaConnectionKey: "postgres-readonly-connection"
    
    # Serilog настройки
    logging:
      level: Information
      microsoftLevel: Warning
      aspnetCoreLevel: Error
      hostingLevel: Information
    
    # OpenTelemetry настройки
    telemetry:
      enabled: true
      namespace: monitoring
      collectorService: otel-collector-opentelemetry-collector
      collectorPort: 4317
  
  image:
    repository: kirillf1/bunkergamecomponets-api
    tag: "1.1"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 80
  
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: bunker-gamecomponents-api.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  healthChecks:
    startup:
      enabled: true
      path: /health/startup
      initialDelaySeconds: 1
      periodSeconds: 10
      failureThreshold: 10
    liveness:
      enabled: true
      path: /health/live
      initialDelaySeconds: 3
      periodSeconds: 30
      timeoutSeconds: 5
      failureThreshold: 3
    readiness:
      enabled: true
      path: /health/ready
      initialDelaySeconds: 0
      periodSeconds: 30
      timeoutSeconds: 5
      failureThreshold: 2

# Bunker ResultCreator API
# Сервис для создания результатов игры с использованием AI
resultCreatorApi:
  enabled: true
  replicaCount: 1

  # Настройки секретов только для чувствительных данных
  # Секреты создаются только для блоков, которые содержат пароли, API ключи и другие чувствительные данные
  
  app:
    environment: Production
    aspnetCoreUrls: "http://+:80"
    allowedHosts: "*"
    
    # Serilog настройки
    logging:
      level: Information
      microsoftLevel: Warning
      aspnetCoreLevel: Error
      hostingLevel: Information
    
    # OpenTelemetry настройки
    telemetry:
      enabled: true
      namespace: monitoring
      collectorService: otel-collector-opentelemetry-collector
      collectorPort: 4317
    
    # Kafka настройки
    kafka:
      # Настройки секрета для Kafka
      existingSecret: ""
      secretKeys:
        loginKey: "kafka-login"
        passwordKey: "kafka-password"
      
      servers: "localhost:9092"
      # Логин и пароль (используются если existingSecret пуст)
      # ВАЖНО: Эти данные чувствительные и будут сохранены в секрете
      login: ""
      password: ""
      createGameResultRequestsTopicName: "create-game-result-requests-test-topic"
      createGameResultResponsesTopicName: "create-game-result-responses-test-topic"
    
    # AI настройки
    ai:
      provider: "Ollama"  # Выберите провайдера: "Ollama" или "GigaChat"
      parallelAgentWorkers: 2  # Количество параллельных воркеров для обработки
      chat:
        temperature: 0.9      # Креативность (0.0-1.0)
        maxOutputTokens: 1012 # Максимальное количество токенов в ответе
        topK: 30              # Параметр для контроля разнообразия
        topP: 1               # Параметр для контроля разнообразия
    
    # Ollama настройки (используются если ai.provider = "Ollama")
    ollama:
      baseUrl: "http://localhost:11434"  # URL сервера Ollama
      model: "owl/t-lite"               # Модель для генерации
    
    # PromptStorage настройки
    promptStorage:
      filePath: ""  # Путь к файлам с промптами (оставить пустым для значений по умолчанию)
    
    # GigaChat настройки (используются если ai.provider = "GigaChat")
    gigaChat:
      # Настройки секрета для GigaChat
      existingSecret: ""
      secretKeys:
        secretKey: "gigachat-secret"
        clientIdKey: "gigachat-client-id"
        clientSecretKey: "gigachat-client-secret"
      
      # SecretKey (используется если existingSecret пуст)
      # ВАЖНО: Этот ключ чувствительный и будет сохранён в секрете
      secretKey: ""
      clientId: ""
      clientSecret: ""
      isCommercial: false      # Коммерческое использование
      ignoreTLS: true          # Игнорировать SSL сертификаты
      baseUrl: "https://gigachat.devices.sberbank.ru/api/v1/"
      authUrl: "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
      defaultModel: "GigaChat-2"  # Модель по умолчанию
      defaultRequestOptions:
        temperature: 0.87  # Креативность
        topP: 0.47         # Контроль разнообразия
        maxTokens: 512     # Максимальное количество токенов
        n: 1               # Количество генерируемых вариантов
        stream: false      # Потоковый режим
  
  image:
    repository: kirillf1/bunker-resultcreator-api
    tag: "1.1"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 80
  
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: bunker-resultcreator-api.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
  
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"
  
  healthChecks:
    startup:
      enabled: true
      path: /health/startup
      initialDelaySeconds: 1
      periodSeconds: 10
      failureThreshold: 10
    liveness:
      enabled: true
      path: /health/live
      initialDelaySeconds: 3
      periodSeconds: 30
      timeoutSeconds: 5
      failureThreshold: 3
    readiness:
      enabled: true
      path: /health/ready
      initialDelaySeconds: 0
      periodSeconds: 30
      timeoutSeconds: 5
      failureThreshold: 2
      
ollama:
  enabled: true           

  # Порт HTTP-API Ollama в контейнере
  port: 11434

  # GPU-настройки
  gpu:
    enabled: true
    type: 'nvidia'
    number: 1
    nvidiaResource: "nvidia.com/gpu"

  # Какие модели сразу скачать при старте
  models:
    pull:
      - owl/t-lite
    run:
      - owl/t-lite
  # Дополнительные настройки Ollama-чарта
  replicaCount: 1

  image:
    repository: "ollama/ollama"
    tag: "latest"
    pullPolicy: IfNotPresent

  service:
    type: LoadBalancer
    port: 11434

  resources:
    
    limits:
      cpu: "2000m"
      memory: "8Gi"

  persistentVolume:
    enabled: true
    size: 10Gi

kafka:
  enabled: true
  clusterName: bunker-cluster
  replicas: 3

  version: "3.9.0"
  metadataVersion: "3.9-IV0"

  # Настройки хранилища брокеров
  storage:
    type: jbod            
    volumes:
      - id: 0
        size: 10Gi        
        storageClass: ""  
        deleteClaim: true

  # Настройка метрик JMX Prometheus exporter
  metrics:
    enabled: true

  # Расширенные настройки размещения
  affinity: {}
  tolerations: []
  nodeSelector: {}

  # Фактор репликации топиков по умолчанию
  topicReplicationFactor: 3