// <auto-generated />
using System;
using Bunker.Game.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bunker.Game.Infrastructure.Migrations
{
    [DbContext(typeof(BunkerGameDbContext))]
    partial class BunkerGameDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bunker.Game.Domain.AggregateModels.Characters.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("GameSessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_session_id");

                    b.Property<bool>("IsKicked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_kicked");

                    b.HasKey("Id")
                        .HasName("pk_characters");

                    b.HasIndex("GameSessionId")
                        .HasDatabaseName("ix_characters_game_session_id");

                    b.ToTable("characters", (string)null);
                });

            modelBuilder.Entity("Bunker.Game.Domain.AggregateModels.Characters.Character", b =>
                {
                    b.OwnsOne("Bunker.Game.Domain.AggregateModels.Characters.Characteristics.AdditionalInformation", "AdditionalInformation", b1 =>
                        {
                            b1.Property<Guid>("CharacterId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("additional_information_description");

                            b1.HasKey("CharacterId");

                            b1.ToTable("characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_characters_characters_id");
                        });

                    b.OwnsOne("Bunker.Game.Domain.AggregateModels.Characters.Characteristics.Age", "Age", b1 =>
                        {
                            b1.Property<Guid>("CharacterId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Years")
                                .HasColumnType("integer")
                                .HasColumnName("age_years")
                                .HasComment("Must be between 17 and 100");

                            b1.HasKey("CharacterId");

                            b1.ToTable("characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_characters_characters_id");
                        });

                    b.OwnsOne("Bunker.Game.Domain.AggregateModels.Characters.Characteristics.Childbearing", "Childbearing", b1 =>
                        {
                            b1.Property<Guid>("CharacterId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<bool>("CanGiveBirth")
                                .HasColumnType("boolean")
                                .HasColumnName("childbearing_can_give_birth");

                            b1.HasKey("CharacterId");

                            b1.ToTable("characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_characters_characters_id");
                        });

                    b.OwnsOne("Bunker.Game.Domain.AggregateModels.Characters.Characteristics.Health", "Health", b1 =>
                        {
                            b1.Property<Guid>("CharacterId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("health_description");

                            b1.HasKey("CharacterId");

                            b1.ToTable("characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_characters_characters_id");
                        });

                    b.OwnsOne("Bunker.Game.Domain.AggregateModels.Characters.Characteristics.Hobby", "Hobby", b1 =>
                        {
                            b1.Property<Guid>("CharacterId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("hobby_description");

                            b1.Property<byte>("Experience")
                                .HasColumnType("smallint")
                                .HasColumnName("hobby_experience")
                                .HasComment("Must be between 1 and 3");

                            b1.HasKey("CharacterId");

                            b1.ToTable("characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_characters_characters_id");
                        });

                    b.OwnsOne("Bunker.Game.Domain.AggregateModels.Characters.Characteristics.Phobia", "Phobia", b1 =>
                        {
                            b1.Property<Guid>("CharacterId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("phobia_description");

                            b1.HasKey("CharacterId");

                            b1.ToTable("characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_characters_characters_id");
                        });

                    b.OwnsOne("Bunker.Game.Domain.AggregateModels.Characters.Characteristics.Profession", "Profession", b1 =>
                        {
                            b1.Property<Guid>("CharacterId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("profession_description");

                            b1.Property<byte>("ExperienceYears")
                                .HasColumnType("smallint")
                                .HasColumnName("profession_experience_years")
                                .HasComment("Must be between 1 and 5");

                            b1.HasKey("CharacterId");

                            b1.ToTable("characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_characters_characters_id");
                        });

                    b.OwnsOne("Bunker.Game.Domain.AggregateModels.Characters.Characteristics.Sex", "Sex", b1 =>
                        {
                            b1.Property<Guid>("CharacterId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("sex_description");

                            b1.HasKey("CharacterId");

                            b1.ToTable("characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_characters_characters_id");
                        });

                    b.OwnsOne("Bunker.Game.Domain.AggregateModels.Characters.Characteristics.Size", "Size", b1 =>
                        {
                            b1.Property<Guid>("CharacterId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<double>("Height")
                                .HasColumnType("double precision")
                                .HasColumnName("size_height")
                                .HasComment("Must be between 130 and 210 cm");

                            b1.Property<double>("Weight")
                                .HasColumnType("double precision")
                                .HasColumnName("size_weight")
                                .HasComment("Must be between 40 and 150 kg");

                            b1.HasKey("CharacterId");

                            b1.ToTable("characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_characters_characters_id");
                        });

                    b.OwnsMany("Bunker.Game.Domain.AggregateModels.Characters.Cards.Card", "Cards", b1 =>
                        {
                            b1.Property<Guid>("character_id")
                                .HasColumnType("uuid")
                                .HasColumnName("character_id");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CardAction")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("card_action");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("description");

                            b1.Property<bool>("IsActivated")
                                .HasColumnType("boolean")
                                .HasColumnName("is_activated");

                            b1.HasKey("character_id", "Id")
                                .HasName("pk_character_cards");

                            b1.ToTable("character_cards", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("character_id")
                                .HasConstraintName("fk_character_cards_characters_character_id");
                        });

                    b.OwnsMany("Bunker.Game.Domain.AggregateModels.Characters.Characteristics.Item", "Items", b1 =>
                        {
                            b1.Property<Guid>("character_id")
                                .HasColumnType("uuid")
                                .HasColumnName("character_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("description");

                            b1.HasKey("character_id", "Id")
                                .HasName("pk_character_items");

                            b1.ToTable("character_items", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("character_id")
                                .HasConstraintName("fk_character_items_characters_character_id");
                        });

                    b.OwnsMany("Bunker.Game.Domain.AggregateModels.Characters.Characteristics.Trait", "Traits", b1 =>
                        {
                            b1.Property<Guid>("character_id")
                                .HasColumnType("uuid")
                                .HasColumnName("character_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("description");

                            b1.HasKey("character_id", "Id")
                                .HasName("pk_character_traits");

                            b1.ToTable("character_traits", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("character_id")
                                .HasConstraintName("fk_character_traits_characters_character_id");
                        });

                    b.Navigation("AdditionalInformation")
                        .IsRequired();

                    b.Navigation("Age")
                        .IsRequired();

                    b.Navigation("Cards");

                    b.Navigation("Childbearing")
                        .IsRequired();

                    b.Navigation("Health")
                        .IsRequired();

                    b.Navigation("Hobby")
                        .IsRequired();

                    b.Navigation("Items");

                    b.Navigation("Phobia")
                        .IsRequired();

                    b.Navigation("Profession")
                        .IsRequired();

                    b.Navigation("Sex")
                        .IsRequired();

                    b.Navigation("Size")
                        .IsRequired();

                    b.Navigation("Traits");
                });
#pragma warning restore 612, 618
        }
    }
}
