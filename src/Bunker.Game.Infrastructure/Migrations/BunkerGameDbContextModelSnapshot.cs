// <auto-generated />
using System;
using Bunker.Game.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bunker.Game.Infrastructure.Migrations
{
    [DbContext(typeof(BunkerGameDbContext))]
    partial class BunkerGameDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bunker.Game.Domain.AggregateModels.Bunkers.BunkerAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<Guid>("GameSessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_session_id");

                    b.Property<bool>("IsReadonly")
                        .HasColumnType("boolean")
                        .HasColumnName("is_readonly");

                    b.HasKey("Id")
                        .HasName("pk_bunkers");

                    b.HasIndex("GameSessionId")
                        .HasDatabaseName("ix_bunkers_game_session_id");

                    b.ToTable("bunkers", (string)null);
                });

            modelBuilder.Entity("Bunker.Game.Domain.AggregateModels.Catastrophes.Catastrophe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<Guid>("GameSessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_session_id");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read_only");

                    b.HasKey("Id")
                        .HasName("pk_catastrophes");

                    b.HasIndex("GameSessionId")
                        .HasDatabaseName("ix_catastrophes_game_session_id");

                    b.ToTable("catastrophes", (string)null);
                });

            modelBuilder.Entity("Bunker.Game.Domain.AggregateModels.Characters.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("GameSessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_session_id");

                    b.Property<bool>("IsKicked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_kicked");

                    b.HasKey("Id")
                        .HasName("pk_characters");

                    b.HasIndex("GameSessionId")
                        .HasDatabaseName("ix_characters_game_session_id");

                    b.ToTable("characters", (string)null);
                });

            modelBuilder.Entity("Bunker.Game.Domain.AggregateModels.GameSessions.GameSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("FreeSeatsCount")
                        .HasColumnType("integer")
                        .HasColumnName("free_seats_count");

                    b.Property<string>("GameResultDescription")
                        .HasMaxLength(20000)
                        .HasColumnType("character varying(20000)")
                        .HasColumnName("game_result_description");

                    b.Property<string>("GameState")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("game_state");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game_sessions");

                    b.ToTable("game_sessions", (string)null);
                });

            modelBuilder.Entity("Bunker.MessageBus.Abstractions.IntegrationEventLogs.IntegrationEventLogEntry", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("EventTypeName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("event_type_name");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int>("TimesSent")
                        .HasColumnType("integer")
                        .HasColumnName("times_sent");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("transaction_id");

                    b.HasKey("EventId")
                        .HasName("pk_integration_event_log");

                    b.HasIndex("TransactionId")
                        .HasDatabaseName("ix_integration_event_log_transaction_id");

                    b.HasIndex("State", "CreationTime")
                        .HasDatabaseName("ix_integration_event_log_state_creation_time");

                    b.ToTable("integration_event_log", (string)null);
                });

            modelBuilder.Entity("Bunker.Game.Domain.AggregateModels.Bunkers.BunkerAggregate", b =>
                {
                    b.OwnsMany("Bunker.Game.Domain.AggregateModels.Bunkers.Environment", "Environments", b1 =>
                        {
                            b1.Property<Guid>("bunker_id")
                                .HasColumnType("uuid")
                                .HasColumnName("bunker_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("description");

                            b1.Property<bool>("IsHidden")
                                .HasColumnType("boolean")
                                .HasColumnName("is_hidden");

                            b1.HasKey("bunker_id", "Id")
                                .HasName("pk_bunker_environments");

                            b1.ToTable("bunker_environments", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("bunker_id")
                                .HasConstraintName("fk_bunker_environments_bunkers_bunker_id");
                        });

                    b.OwnsMany("Bunker.Game.Domain.AggregateModels.Bunkers.Item", "Items", b1 =>
                        {
                            b1.Property<Guid>("bunker_id")
                                .HasColumnType("uuid")
                                .HasColumnName("bunker_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("description");

                            b1.Property<bool>("IsHidden")
                                .HasColumnType("boolean")
                                .HasColumnName("is_hidden");

                            b1.HasKey("bunker_id", "Id")
                                .HasName("pk_bunker_items");

                            b1.ToTable("bunker_items", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("bunker_id")
                                .HasConstraintName("fk_bunker_items_bunkers_bunker_id");
                        });

                    b.OwnsMany("Bunker.Game.Domain.AggregateModels.Bunkers.Room", "Rooms", b1 =>
                        {
                            b1.Property<Guid>("bunker_id")
                                .HasColumnType("uuid")
                                .HasColumnName("bunker_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("description");

                            b1.Property<bool>("IsHidden")
                                .HasColumnType("boolean")
                                .HasColumnName("is_hidden");

                            b1.HasKey("bunker_id", "Id")
                                .HasName("pk_bunker_rooms");

                            b1.ToTable("bunker_rooms", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("bunker_id")
                                .HasConstraintName("fk_bunker_rooms_bunkers_bunker_id");
                        });

                    b.Navigation("Environments");

                    b.Navigation("Items");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Bunker.Game.Domain.AggregateModels.Characters.Character", b =>
                {
                    b.OwnsOne("Bunker.Game.Domain.AggregateModels.Characters.Characteristics.AdditionalInformation", "AdditionalInformation", b1 =>
                        {
                            b1.Property<Guid>("CharacterId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("additional_information_description");

                            b1.HasKey("CharacterId");

                            b1.ToTable("characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_characters_characters_id");
                        });

                    b.OwnsOne("Bunker.Game.Domain.AggregateModels.Characters.Characteristics.Age", "Age", b1 =>
                        {
                            b1.Property<Guid>("CharacterId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Years")
                                .HasColumnType("integer")
                                .HasColumnName("age_years")
                                .HasComment("Must be between 17 and 100");

                            b1.HasKey("CharacterId");

                            b1.ToTable("characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_characters_characters_id");
                        });

                    b.OwnsOne("Bunker.Game.Domain.AggregateModels.Characters.Characteristics.Childbearing", "Childbearing", b1 =>
                        {
                            b1.Property<Guid>("CharacterId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<bool>("CanGiveBirth")
                                .HasColumnType("boolean")
                                .HasColumnName("childbearing_can_give_birth");

                            b1.HasKey("CharacterId");

                            b1.ToTable("characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_characters_characters_id");
                        });

                    b.OwnsOne("Bunker.Game.Domain.AggregateModels.Characters.Characteristics.Health", "Health", b1 =>
                        {
                            b1.Property<Guid>("CharacterId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("health_description");

                            b1.HasKey("CharacterId");

                            b1.ToTable("characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_characters_characters_id");
                        });

                    b.OwnsOne("Bunker.Game.Domain.AggregateModels.Characters.Characteristics.Hobby", "Hobby", b1 =>
                        {
                            b1.Property<Guid>("CharacterId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("hobby_description");

                            b1.Property<byte>("Experience")
                                .HasColumnType("smallint")
                                .HasColumnName("hobby_experience")
                                .HasComment("Must be between 1 and 3");

                            b1.HasKey("CharacterId");

                            b1.ToTable("characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_characters_characters_id");
                        });

                    b.OwnsOne("Bunker.Game.Domain.AggregateModels.Characters.Characteristics.Phobia", "Phobia", b1 =>
                        {
                            b1.Property<Guid>("CharacterId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("phobia_description");

                            b1.HasKey("CharacterId");

                            b1.ToTable("characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_characters_characters_id");
                        });

                    b.OwnsOne("Bunker.Game.Domain.AggregateModels.Characters.Characteristics.Profession", "Profession", b1 =>
                        {
                            b1.Property<Guid>("CharacterId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("profession_description");

                            b1.Property<byte>("ExperienceYears")
                                .HasColumnType("smallint")
                                .HasColumnName("profession_experience_years")
                                .HasComment("Must be between 1 and 5");

                            b1.HasKey("CharacterId");

                            b1.ToTable("characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_characters_characters_id");
                        });

                    b.OwnsOne("Bunker.Game.Domain.AggregateModels.Characters.Characteristics.Sex", "Sex", b1 =>
                        {
                            b1.Property<Guid>("CharacterId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("sex_description");

                            b1.HasKey("CharacterId");

                            b1.ToTable("characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_characters_characters_id");
                        });

                    b.OwnsOne("Bunker.Game.Domain.AggregateModels.Characters.Characteristics.Size", "Size", b1 =>
                        {
                            b1.Property<Guid>("CharacterId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<double>("Height")
                                .HasColumnType("double precision")
                                .HasColumnName("size_height")
                                .HasComment("Must be between 130 and 210 cm");

                            b1.Property<double>("Weight")
                                .HasColumnType("double precision")
                                .HasColumnName("size_weight")
                                .HasComment("Must be between 40 and 150 kg");

                            b1.HasKey("CharacterId");

                            b1.ToTable("characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_characters_characters_id");
                        });

                    b.OwnsMany("Bunker.Game.Domain.AggregateModels.Characters.Cards.Card", "Cards", b1 =>
                        {
                            b1.Property<Guid>("character_id")
                                .HasColumnType("uuid")
                                .HasColumnName("character_id");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CardAction")
                                .IsRequired()
                                .HasColumnType("jsonb")
                                .HasColumnName("card_action");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("description");

                            b1.Property<bool>("IsActivated")
                                .HasColumnType("boolean")
                                .HasColumnName("is_activated");

                            b1.HasKey("character_id", "Id")
                                .HasName("pk_character_cards");

                            b1.HasIndex("character_id")
                                .HasDatabaseName("ix_character_cards_character_id");

                            b1.ToTable("character_cards", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("character_id")
                                .HasConstraintName("fk_character_cards_characters_character_id");
                        });

                    b.OwnsMany("Bunker.Game.Domain.AggregateModels.Characters.Characteristics.Item", "Items", b1 =>
                        {
                            b1.Property<Guid>("character_id")
                                .HasColumnType("uuid")
                                .HasColumnName("character_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("description");

                            b1.HasKey("character_id", "Id")
                                .HasName("pk_character_items");

                            b1.HasIndex("character_id")
                                .HasDatabaseName("ix_character_items_character_id");

                            b1.ToTable("character_items", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("character_id")
                                .HasConstraintName("fk_character_items_characters_character_id");
                        });

                    b.OwnsMany("Bunker.Game.Domain.AggregateModels.Characters.Characteristics.Trait", "Traits", b1 =>
                        {
                            b1.Property<Guid>("character_id")
                                .HasColumnType("uuid")
                                .HasColumnName("character_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("description");

                            b1.HasKey("character_id", "Id")
                                .HasName("pk_character_traits");

                            b1.HasIndex("character_id")
                                .HasDatabaseName("ix_character_traits_character_id");

                            b1.ToTable("character_traits", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("character_id")
                                .HasConstraintName("fk_character_traits_characters_character_id");
                        });

                    b.Navigation("AdditionalInformation")
                        .IsRequired();

                    b.Navigation("Age")
                        .IsRequired();

                    b.Navigation("Cards");

                    b.Navigation("Childbearing")
                        .IsRequired();

                    b.Navigation("Health")
                        .IsRequired();

                    b.Navigation("Hobby")
                        .IsRequired();

                    b.Navigation("Items");

                    b.Navigation("Phobia")
                        .IsRequired();

                    b.Navigation("Profession")
                        .IsRequired();

                    b.Navigation("Sex")
                        .IsRequired();

                    b.Navigation("Size")
                        .IsRequired();

                    b.Navigation("Traits");
                });

            modelBuilder.Entity("Bunker.Game.Domain.AggregateModels.GameSessions.GameSession", b =>
                {
                    b.OwnsMany("Bunker.Game.Domain.AggregateModels.GameSessions.Character", "Characters", b1 =>
                        {
                            b1.Property<Guid>("game_session_id")
                                .HasColumnType("uuid")
                                .HasColumnName("game_session_id");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<bool>("IsGameCreator")
                                .HasColumnType("boolean")
                                .HasColumnName("is_game_creator");

                            b1.Property<bool>("IsKicked")
                                .HasColumnType("boolean")
                                .HasColumnName("is_kicked");

                            b1.HasKey("game_session_id", "Id")
                                .HasName("pk_game_session_characters");

                            b1.ToTable("game_session_characters", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("game_session_id")
                                .HasConstraintName("fk_game_session_characters_game_sessions_game_session_id");

                            b1.OwnsOne("Bunker.Game.Domain.AggregateModels.GameSessions.Player", "Player", b2 =>
                                {
                                    b2.Property<Guid>("Charactergame_session_id")
                                        .HasColumnType("uuid")
                                        .HasColumnName("game_session_id");

                                    b2.Property<Guid>("CharacterId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("id");

                                    b2.Property<string>("Id")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("player_id");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)")
                                        .HasColumnName("player_name");

                                    b2.HasKey("Charactergame_session_id", "CharacterId");

                                    b2.HasIndex("Id")
                                        .HasDatabaseName("ix_game_session_characters_player_id");

                                    b2.ToTable("game_session_characters");

                                    b2.WithOwner()
                                        .HasForeignKey("Charactergame_session_id", "CharacterId")
                                        .HasConstraintName("fk_game_session_characters_game_session_characters_game_sessio");
                                });

                            b1.Navigation("Player");
                        });

                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
