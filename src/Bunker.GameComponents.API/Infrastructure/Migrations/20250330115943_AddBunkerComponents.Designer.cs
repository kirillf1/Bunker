// <auto-generated />
using System;
using Bunker.GameComponents.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bunker.GameComponents.API.Migrations
{
    [DbContext(typeof(GameComponentsContext))]
    [Migration("20250330115943_AddBunkerComponents")]
    partial class AddBunkerComponents
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("game_components")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.BunkerComponents.BunkerItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_bunker_items");

                    b.ToTable("bunker_items", "game_components");
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.BunkerComponents.EnvironmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_bunker_environments");

                    b.ToTable("bunker_environments", "game_components");
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.BunkerComponents.RoomEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_bunker_rooms");

                    b.ToTable("bunker_rooms", "game_components");
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.CharacterComponents.AdditionalInformationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_additional_information_entitles");

                    b.ToTable("additional_information_entitles", "game_components");
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.CardActionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)")
                        .HasColumnName("discriminator");

                    b.HasKey("Id")
                        .HasName("pk_card_actions");

                    b.ToTable("card_actions", "game_components");

                    b.HasDiscriminator().HasValue("CardActionEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CardActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("card_action_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_cards");

                    b.HasIndex("CardActionId")
                        .IsUnique()
                        .HasDatabaseName("ix_cards_card_action_id");

                    b.ToTable("cards", "game_components");
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.CharacterComponents.HealthEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_health_entitles");

                    b.ToTable("health_entitles", "game_components");
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.CharacterComponents.HobbyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_hobbies");

                    b.ToTable("hobbies", "game_components");
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.CharacterComponents.ItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_items");

                    b.ToTable("items", "game_components");
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.CharacterComponents.PhobiaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_phobias");

                    b.ToTable("phobias", "game_components");
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.CharacterComponents.ProfessionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_professions");

                    b.ToTable("professions", "game_components");
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.CharacterComponents.TraitEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_traits");

                    b.ToTable("traits", "game_components");
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.AddCharacteristicEntity", b =>
                {
                    b.HasBaseType("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.CardActionEntity");

                    b.Property<Guid?>("CharacteristicId")
                        .HasColumnType("uuid")
                        .HasColumnName("characteristic_id");

                    b.Property<string>("CharacteristicType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("characteristic_type");

                    b.Property<int>("TargetCharactersCount")
                        .HasColumnType("integer")
                        .HasColumnName("target_characters_count");

                    b.ToTable("card_actions", "game_components");

                    b.HasDiscriminator().HasValue("AddCharacteristic");
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.EmptyActionEntity", b =>
                {
                    b.HasBaseType("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.CardActionEntity");

                    b.ToTable("card_actions", "game_components");

                    b.HasDiscriminator().HasValue("EmptyAction");
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.ExchangeCharacteristicActionEntity", b =>
                {
                    b.HasBaseType("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.CardActionEntity");

                    b.Property<string>("CharacteristicType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("characteristic_type");

                    b.ToTable("card_actions", "game_components", t =>
                        {
                            t.Property("CharacteristicType")
                                .HasColumnName("exchange_characteristic_action_entity_characteristic_type");
                        });

                    b.HasDiscriminator().HasValue("ExchangeCharacteristic");
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.RecreateBunkerActionEntity", b =>
                {
                    b.HasBaseType("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.CardActionEntity");

                    b.ToTable("card_actions", "game_components");

                    b.HasDiscriminator().HasValue("RecreateBunker");
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.RecreateCatastropheActionEntity", b =>
                {
                    b.HasBaseType("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.CardActionEntity");

                    b.ToTable("card_actions", "game_components");

                    b.HasDiscriminator().HasValue("RecreateCatastrophe");
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.RecreateCharacterActionEntity", b =>
                {
                    b.HasBaseType("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.CardActionEntity");

                    b.Property<int>("TargetCharactersCount")
                        .HasColumnType("integer")
                        .HasColumnName("target_characters_count");

                    b.ToTable("card_actions", "game_components", t =>
                        {
                            t.Property("TargetCharactersCount")
                                .HasColumnName("recreate_character_action_entity_target_characters_count");
                        });

                    b.HasDiscriminator().HasValue("RecreateCharacter");
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.RemoveCharacteristicCardActionEntity", b =>
                {
                    b.HasBaseType("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.CardActionEntity");

                    b.Property<string>("CharacteristicType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("characteristic_type");

                    b.Property<int>("TargetCharactersCount")
                        .HasColumnType("integer")
                        .HasColumnName("target_characters_count");

                    b.ToTable("card_actions", "game_components", t =>
                        {
                            t.Property("CharacteristicType")
                                .HasColumnName("remove_characteristic_card_action_entity_characteristic_type");

                            t.Property("TargetCharactersCount")
                                .HasColumnName("remove_characteristic_card_action_entity_target_characters_count");
                        });

                    b.HasDiscriminator().HasValue("RemoveCharacteristic");
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.RerollCharacteristicCardActionEntity", b =>
                {
                    b.HasBaseType("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.CardActionEntity");

                    b.Property<Guid?>("CharacteristicId")
                        .HasColumnType("uuid")
                        .HasColumnName("characteristic_id");

                    b.Property<string>("CharacteristicType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("characteristic_type");

                    b.Property<bool>("IsSelfTarget")
                        .HasColumnType("boolean")
                        .HasColumnName("is_self_target");

                    b.Property<int>("TargetCharactersCount")
                        .HasColumnType("integer")
                        .HasColumnName("target_characters_count");

                    b.ToTable("card_actions", "game_components", t =>
                        {
                            t.Property("CharacteristicId")
                                .HasColumnName("reroll_characteristic_card_action_entity_characteristic_id");

                            t.Property("CharacteristicType")
                                .HasColumnName("reroll_characteristic_card_action_entity_characteristic_type");

                            t.Property("TargetCharactersCount")
                                .HasColumnName("reroll_characteristic_card_action_entity_target_characters_count");
                        });

                    b.HasDiscriminator().HasValue("RerollCharacteristic");
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.RevealBunkerGameComponentCardActionEntity", b =>
                {
                    b.HasBaseType("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.CardActionEntity");

                    b.Property<string>("BunkerObjectType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bunker_object_type");

                    b.ToTable("card_actions", "game_components");

                    b.HasDiscriminator().HasValue("RevealBunkerGameComponent");
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.SpyCharacteristicCardActionEntity", b =>
                {
                    b.HasBaseType("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.CardActionEntity");

                    b.Property<string>("CharacteristicType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("characteristic_type");

                    b.Property<int>("TargetCharactersCount")
                        .HasColumnType("integer")
                        .HasColumnName("target_characters_count");

                    b.ToTable("card_actions", "game_components", t =>
                        {
                            t.Property("CharacteristicType")
                                .HasColumnName("spy_characteristic_card_action_entity_characteristic_type");

                            t.Property("TargetCharactersCount")
                                .HasColumnName("spy_characteristic_card_action_entity_target_characters_count");
                        });

                    b.HasDiscriminator().HasValue("SpyCharacteristic");
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardEntity", b =>
                {
                    b.HasOne("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.CardActionEntity", "CardAction")
                        .WithOne("CardEntity")
                        .HasForeignKey("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardEntity", "CardActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cards_card_actions_card_action_id");

                    b.Navigation("CardAction");
                });

            modelBuilder.Entity("Bunker.GameComponents.API.Entities.CharacterComponents.Cards.CardActions.CardActionEntity", b =>
                {
                    b.Navigation("CardEntity")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
